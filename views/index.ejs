<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Letisgo</title>
  <meta author="Bernardo Fernando Reolon/@bernarlink - Henrique Gabriel Albring/@Skyramopdemo">

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Lilita+One&family=Permanent+Marker&display=swap" rel="stylesheet">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <script defer src="https://maps.googleapis.com/maps/api/js?&key=<%=map_api%>&loading=async&callback=initMap&libraries=marker"></script>
  <!-- <script defer src="https://maps.googleapis.com/maps/api/js?v=beta&key=<%=map_api%>&loading=async&callback=initMap&libraries=marker"></script> -->

</head>

<body>
  <style>
    #map {
      height: 100%;
    }

    html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }

    .title-font {
      font-family: "Lilita One", sans-serif;
  font-weight: 400;
  font-style: normal;
    }
  </style>


  <div class="py-2 bg-body-tertiary border-bottom">
    <header class="container d-flex flex-wrap">
      <ul class="nav me-auto">
        <li class="nav-item"><a href="#" class="nav-link link-body-emphasis px-2">LetisGo</a></li>
      </ul>
      <ul class="nav">
        <li class="nav-item px-4"><a href="#" class="nav-link link-body-emphasis px-2 active"
            aria-current="page">Rota</a></li>
        <li class="nav-item"><a href="#" class="nav-link link-body-emphasis px-2">Sobre</a></li>
    </header>
  </div>
  <br>


  <div class="container d-flex flex-column">

    <h1 class="title-font py-3">Letisbora para o trejeto?</h1>


    <label for="partida" class="title-font py-1">Local de Partida</label>
    <input type="text" name="partida" id="partida" placeholder="Rua XXX, RS - Brasil">

    <label for="final" class="title-font py-1">Destino Final</label>
    <input type="text" name="final" id="final" placeholder="Rua XXX, RS - Brasil">

    <label for="viagem" class="title-font py-1">Modo de Viagem</label>
    <select name="viagem" id="viagem">
      <option value="DRIVING">Dirigindo</option>
    </select>

    <label for="interesse" class="title-font py-1">Pontos de Interesse/Quantidade</label>
    <div id="points" class="d-flex flex-column">
      <div class="d-flex flex-row">
        <select name="viagem" class="point  w-50">
          <option value="" default></option>
          <option value="gas_station">Posto de Combustível</option>
          <!-- <option value="gym">Academia</option> -->
          <option value="stadium">Estádio</option>
          <option value="supermarket">Super Mercado</option>
          <!-- <option value="market">Mercado</option> -->
          <!-- <option value="liquor-store">Botillera</option> -->
          <option value="farm">Fazenda</option>
          <option value="art_gallery">Galeria de Arte</option>
          <!-- <option value="library">Biblioteca</option> -->
          <option value="zoo">Zoológico</option>
          <option value="national_park">Parque Nacional</option>
          <option value="movie_theater">Cinema</option>
          <option value="historical_landmark">Monumento Histórico</option>
          <option value="hiking_area">Trilha</option>
          <option value="bank">Banco</option>
          <!-- <option value="atm">ATM</option> -->
          <option value="restaurant">Restaurante</option>
          <option value="cafe">Café</option>
          <option value="bakery">Padaria</option>
          <option value="bar">Bar</option>
          <!--<option value="fire_station"></option>-->
          <!--<option value="police"></option>-->
          <!--<option value="post_office"></option>-->
          <!--<option value="dentist"></option>-->
          <!-- <option value="drugstore">Farmácia</option> -->
          <option value="hospital">Hospital</option>
          <option value="campground">Parque de Campismo</option>
          <option value="hotel">Hotel</option>
          <option value="church">Igreja</option>
          <option value="hindu_temple">Templo Hindu</option>
          <option value="mosque">Mesquita</option>
          <option value="synagogue">Sinagoga</option>
      </select>
      <input type="number" class="pointQnt w-50" name="interesse" placeholder="Quantidade de Pontos">
    </div>
  </div>
    
    <button type="button" class="" onclick="addInput()">+</button>

    <label for="dis" class="title-font py-1 ">Distância Máxima entre Pontos</label>
    <input type="number" name="distance" id="distance" value=50000>

    <button type="button" class="my-4 py-3" onclick="createRoute()">Criar Rota</button>


  </div>

  

  <div id="map"></div>
  <!--<script async
    src="https://routes.googleapis.com/directions/v2:computeRoutes?key=<%=route_api%>">
    </script>-->

    <script>
      (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
        key: "<%=places_api%>",
        v: "weekly",
        // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
        // Add other bootstrap parameters as needed, using camel case.
      });
    </script>
    
  <script>
    let baseDistance
    let map;
    var lat;
    var lng;
    var coords = [];
    var arrayNames = [];
    var last;
    var markersArray = [];
    var placeNameArray = []
    var disObject = null;


    var stack;

    var waypntsComplete = {}


    function addInput(){
      var div = document.getElementById("points");

      var type = document.querySelectorAll(".point")
      var typeQnt = document.querySelectorAll(".pointQnt")

      div.innerHTML += '<div class="d-flex flex-row"><select name="viagem" class="point w-50"><option value="" default><option value="gas_station">Posto de Combustível</option><option value="stadium">Estádio</option><option value="supermarket">Super Mercado</option><option value="farm">Fazenda</option><option value="art_gallery">Galeria de Arte</option><option value="zoo">Zoológico</option><option value="national_park">Parque Nacional</option><option value="movie_theater">Cinema</option><option value="historical_landmark">Monumento Histórico</option><option value="hiking_area">Trilha</option><option value="bank">Banco</option><option value="shopping_mall">Shopping</option><option value="restaurant">Restaurante</option><option value="cafe">Café</option><option value="bakery">Padaria</option><option value="bar">Bar</option><option value="hospital">Hospital</option><option value="campground">Parque de Campismo</option><option value="hotel">Hotel</option><option value="church">Igreja</option><option value="hindu_temple">Templo Hindu</option><option value="mosque">Mesquita</option><option value="synagogue">Sinagoga</option></select><input type="number" class="pointQnt w-50" name="interesse" placeholder="Quantidade de Pontos"></div>'
    

      var typeNEW = document.querySelectorAll(".point")
      var typeQntNEW = document.querySelectorAll(".pointQnt")


      for (let i = 0; i < typeQnt.length; i++){
        typeQntNEW[i].value = typeQnt[i].value
      }
      for (let i = 0; i < type.length; i++){
        typeNEW[i].value = type[i].value
      }
      
    }

    function initMap(){
      var directionsService = new window.google.maps.DirectionsService(); var directionsRenderer = new window.google.maps.DirectionsRenderer(); map = new google.maps.Map(document.getElementById("map"), {
      zoom: 8,
      center: { lat: -29.2246, lng: -51.351 },
      streetViewControl: false,
      fullScreenControl: false,
      mapId: "map",
      })
    }


    function defaultDistance(origin, destination, travelMode){
      var distance = new google.maps.DistanceMatrixService();
      distance.getDistanceMatrix(
        {
          origins: [origin],
          destinations: [destination],
          travelMode: travelMode,
        }, (response, status)=> {baseDistance = response.rows[0].elements[0].distance.value})
    }
    
    function renderRoute(start, end, waypoints){
      var directionsService = new window.google.maps.DirectionsService();
      var directionsRenderer = new window.google.maps.DirectionsRenderer();
      directionsRenderer.setDirections({routes: []}); directionsRenderer.setMap(map);
      var waypts = [];

      var type = document.querySelectorAll(".point")
      var typeQnt = document.querySelectorAll(".pointQnt")

      stack++

      if(stack < 4){
        createRoute()
      }


      console.log(waypntsComplete)

      var total = 0

      for (let i = 0; i < typeQnt.length; i++){
        total += typeQnt[i].value

        console.log(total)
      }


      //Passa por todos os tipos selecionados
      for (let i = 0; i < type.length; i++){
        //Variavel savedPoints, salva os pontos aos quais serão escolhidos aleatoriamente
        var savedPoints = []
        //Passa por todos os waypoints salvos nas pesquisas (tem q fazer salvarem os waypntsComplete)
        for (key in waypntsComplete){
          //Verifica se o tipo I é o mesmo tipo que está presente no item J, e salva o endereço do item J nos pontos salvos
          if(waypntsComplete[key][1].includes(type[i].value)){
            //console.log(type)
            //console.log("//")
            //console.log(waypntsComplete[key])
            savedPoints.push(waypntsComplete[key])
          }
        }
      }
      
      //console.log(savedPoints)

      //Passa por todas as quantidade dos tipos selecionados
      for (let i = 0; i < typeQnt.length; i++){
        t = typeQnt[i]
        
        //console.log(typeQnt)
        //console.log(t)
        
        //Faz um loop igual a quantidade dos tipos selecionados
        for (let j = 0; j < t.value; j++){
          //Pega um ponto qualquer dos itens salvos
          var pnt = savedPoints[random(0, savedPoints.length)][2];
          //Define o pnt como ponto
          waypts.push({
            location: pnt,
            stopover: true
          })

          //break
        }
      }

      //for (let i = 0; i < waypoints.length; i++) {
        //waypts.push({
          //location: waypoints[i],
          //stopover: true,
        //});
      //}

      var request = {
        origin: start,
        destination: end,
        waypoints: waypts,
        optimizeWaypoints: true,
        travelMode: document.getElementById('viagem').value
      }
      directionsService.route(request, function (result, status) {
        if (status == "OK") {
          directionsRenderer.setDirections(result);
        }
      },
      directionsRenderer.setMap(map))
      disObject = directionsRenderer
    }
    
    function createRoute(){
      var origin = document.getElementById('partida').value;
      var destination = document.getElementById('final').value;
      var travelMode = document.getElementById('viagem').value;
      var maxRange = parseInt(document.getElementById('distance').value);

      if(disObject){
        disObject.setMap(null)
      }

      defaultDistance(origin, destination, travelMode);
      nearbySearch(origin, destination, maxRange);
    }

    async function nearbySearch(origin, destination, maxRange) {
      var { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
      var { Place, SearchNearbyRankPreference } = await google.maps.importLibrary("places");
      var geocoder = new google.maps.Geocoder();
      var distance = new google.maps.DistanceMatrixService();
      placeNameArray = []

      await geocoder.geocode( { 'address': origin}, async function(results, status) {
        if (status == google.maps.GeocoderStatus.OK)
        {
          coords = results[0].geometry.location
        }
        else{
          errorAlert("erro");
        }
      });
      var lat = coords.lat()
      var lng = coords.lng()
      var center = await new google.maps.LatLng(lat, lng);
      

      var request = {
        fields: ["displayName", "location", "businessStatus", "types"],
        locationRestriction: {
          center: center,
          radius: maxRange,
        },
        maxResultCount: 20,
        rankPreference: SearchNearbyRankPreference.POPULARITY,
        language: "pt-BR",
        region: "br",
      };
      var { places } = await Place.searchNearby(request);
      
      
      //Apenas mostra no mapa os pontos que foram gerados
      await createSecundaryPoints(places)



      places.forEach((place) => {
        placeNameArray.push(place.displayName)
      });
      
      distance.getDistanceMatrix({
        origins: placeNameArray,
        destinations: [destination],
        travelMode: 'DRIVING',
      }, searchNearest)
      
    }
      
    async function searchNearest(response, status){
      var origin = document.getElementById('partida').value;
      var destination = document.getElementById('final').value;
      var maxRange = parseInt(document.getElementById('distance').value);
      var travelMode = document.getElementById('viagem').value;



      arrayPoints = {}



      var checkSum = 0;
      let promessa = new Promise(function(){
       if(status != undefined){
          for(i = 0; i<20; i++){
            if(response.rows[i].elements[0].status == "OK"){
              if(response.rows[i].elements[0].distance.value < baseDistance){
                arrayPoints[placeNameArray[i]] = response.originAddresses[i];
              }else{
                checkSum += 1
              }
            }else{
              checkSum += 1
            }
          }
        }
      });
      if(checkSum == 20){
        renderRoute(origin, destination, arrayNames);
      }
      else{
        var arraySize = Object.keys(arrayPoints).length;
        var randomKey = random(0, arraySize)
        var randomPoint = Object.keys(arrayPoints)[randomKey]
        arrayNames.push(randomPoint)
        defaultDistance(randomPoint, destination, travelMode)
        nearbySearch(randomPoint, destination, maxRange)
      }

      await promessa;
    }
    
    async function createSecundaryPoints(places){
      if (places.length) {
        var { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
        const { LatLngBounds } = await google.maps.importLibrary("core");
        const {PinElement} = await google.maps.importLibrary("marker")
        const bounds = new LatLngBounds();
        
        places.forEach((place) => {
          waypntsComplete[place.id] = [place.displayName, place.types, place.location]
          const pin = new PinElement({
            background: "#A0AAAB",
            borderColor: "#3C4344",
            glyphColor: "#E4E7E7"
          })
          ///////////////////////////////ESTA EM BETA AINDA, ADICIONAR DPS
          //pin.addEventListener("click", function(e, place){
          //  console.log("BB" + place.displayName)
          //})
          const markerView = new AdvancedMarkerElement({
            map,
            position: place.location,
            title: place.displayName,
            content: pin.element,
          });
      
          bounds.extend(place.location);
        });
        map.fitBounds(bounds);
      } else {
        errorAlert("No results");
      }

    }

    //Melhorar dps, so quero ter algo por enquanto
    function errorAlert(text){
      console.log(text)
      alert(text);
    }
 
    function random(min, max){
      return Math.floor(Math.random() * (max - min) ) + min;
    }
    
    
    
  </script>

</body>

</html>
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Letisgo</title>
  <meta author="Bernardo Fernando Reolon/@bernarlink - Henrique Gabriel Albring/@Skyramopdemo">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>

  <script defer src="https://maps.googleapis.com/maps/api/js?key=<%=map_api%>&loading=async&callback=initMap&libraries=marker">
  </script>

</head>

<body>
  <style>
    #map {
      height: 100%;
    }

    html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
  </style>


  <div class="py-2 bg-body-tertiary border-bottom">
    <header class="container d-flex flex-wrap">
      <ul class="nav me-auto">
        <li class="nav-item"><a href="#" class="nav-link link-body-emphasis px-2">LetisGo</a></li>
      </ul>
      <ul class="nav">
        <li class="nav-item px-4"><a href="#" class="nav-link link-body-emphasis px-2 active"
            aria-current="page">Rota</a></li>
        <li class="nav-item"><a href="#" class="nav-link link-body-emphasis px-2">Sobre</a></li>
    </header>
  </div>


  <div class="container d-flex flex-column">

    <h1>Letisbora para o trejeto?</h1>


    <label for="partida">Local de Partida</label>
    <input type="text" name="partida" id="partida" placeholder="Rua XXX, RS - Brasil">

    <label for="final">Destino Final</label>
    <input type="text" name="final" id="final" placeholder="Rua XXX, RS - Brasil">

    <label for="viagem">Modo de Viagem</label>
    <select name="viagem" id="viagem">
      <option value="DRIVING">Dirigindo</option>
    </select>

    <label for="interesse">Pontos de Interesse</label>
    <input type="text" name="interesse" id="interesse" placeholder="Rua XXX, RS - Brasil">

    <label for="dis">Distância Máxima entre Pontos</label>
    <input type="number" name="distance" id="distance" value=50000>


    <button type="button" onclick="createRoute()">Criar Rota</button>
  </div>


  <div id="map"></div>
  <!--<script async
    src="https://routes.googleapis.com/directions/v2:computeRoutes?key=<%=route_api%>">
    </script>-->

    <script>
      (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
        key: "<%=places_api%>",
        v: "weekly",
        // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
        // Add other bootstrap parameters as needed, using camel case.
      });
    </script>
    
  <script>
    let baseDistance
    let map;
    var lat;
    var lng;
    var coords = [];
    var arrayNames = [];
    var last;
    var markersArray = [];
    var placeArray = []
    
    function initMap(){
      var directionsService = new window.google.maps.DirectionsService(); var directionsRenderer = new window.google.maps.DirectionsRenderer(); map = new google.maps.Map(document.getElementById("map"), {
      zoom: 8,
      center: { lat: -29.2246, lng: -51.351 },
      streetViewControl: false,
      fullScreenControl: false,
      mapId: "map",
      })
    }


    function defaultDistance(origin, destination, travelMode){
      var distance = new google.maps.DistanceMatrixService();
      distance.getDistanceMatrix(
        {
          origins: [origin],
          destinations: [destination],
          travelMode: travelMode,
        }, (response, status)=> {baseDistance = response.rows[0].elements[0].distance.value})

    }
    
    function renderRoute(start, end, waypoints){
      var directionsService = new window.google.maps.DirectionsService();
      var directionsRenderer = new window.google.maps.DirectionsRenderer();
      directionsRenderer.setDirections({routes: []});
      directionsRenderer.setMap(map)
      var waypts = [];
      for (let i = 0; i < waypoints.length; i++) {
        waypts.push({
          location: waypoints[i],
          stopover: true,
        });
      }
      var request = {
        origin: start,
        destination: end,
        waypoints: waypts,
        optimizeWaypoints: true,
        travelMode: document.getElementById('viagem').value
      }
      directionsService.route(request, function (result, status) {
        if (status == "OK") {
          directionsRenderer.setDirections(result);
        }
      },
      directionsRenderer.setMap(map))
    }
    
    function createRoute(){
      var origin = document.getElementById('partida').value;
      var destination = document.getElementById('final').value;
      var travelMode = document.getElementById('viagem').value;
      var maxRange = parseInt(document.getElementById('distance').value);
      //directionsService.route(request, function (result, status) {
      //  if (status == "OK") {
      //    directionsRenderer.setDirections(result);
      //  }
      //},
      //directionsRenderer.setMap(map))

      defaultDistance(origin, destination, travelMode)

      
      nearbySearch(origin, destination, maxRange);
    }

    async function nearbySearch(origin, destination, maxRange) {
      var { Place, SearchNearbyRankPreference } = await google.maps.importLibrary("places");
      var { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
      var geocoder = new google.maps.Geocoder();
      var distance = new google.maps.DistanceMatrixService();
      placeArray = []
      
      //var origin = document.getElementById('partida').value;
      //var destination = document.getElementById('final').value;
      var preference = ["restaurant"]
      
      
      await geocoder.geocode( { 'address': origin}, async function(results, status) {
        if (status == google.maps.GeocoderStatus.OK)
        {
          coords = results[0].geometry.location
        }
        else{
          errorAlert("erro");
        }
      });
      var lat = coords.lat()
      var lng = coords.lng()
      var center = await new google.maps.LatLng(lat, lng);
      

      var request = {
        fields: ["displayName", "location", "businessStatus", "types"],
        locationRestriction: {
          center: center,
          radius: maxRange,
        },
        includedPrimaryTypes: preference,
        maxResultCount: 20,
        rankPreference: SearchNearbyRankPreference.POPULARITY,
        language: "pt-BR",
        region: "br",
      };
      var { places } = await Place.searchNearby(request);
    
      //var nearest = searchNearest(places);

      
      //if (places.length) {
      //  const { LatLngBounds } = await google.maps.importLibrary("core");
      //  const bounds = new LatLngBounds();
      //  
      //  places.forEach((place) => {
      //    const markerView = new AdvancedMarkerElement({
      //      map,
      //      position: place.location,
      //      title: place.displayName,
      //    });
      //
      //    bounds.extend(place.location);
      //    console.log(place);
      //  });
      //  map.fitBounds(bounds);
      //} else {
      //  errorAlert("No results");
      //}


      places.forEach((place) => {
        placeArray.push(place.displayName)
      });

      //console.log(placeArray);
      //console.log(placeArray)
      distance.getDistanceMatrix(
        {
          origins: placeArray,
          destinations: [destination],
          travelMode: 'DRIVING',
          //transitOptions: TransitOptions,
          //drivingOptions: DrivingOptions,
          //unitSystem: google.maps.UnitSystem.METRIC,
          //avoidHighways: Boolean,
          //avoidTolls: Boolean,
        }, searchNearest)
        
      }
      
      async function searchNearest(response, status){
      var origin = document.getElementById('partida').value;
      var destination = document.getElementById('final').value;
      var maxRange = parseInt(document.getElementById('distance').value);
      var travelMode = document.getElementById('viagem').value;

      arrayPoints = {}
      console.log("///")
      console.log(response)
      console.log(status)
      
      
      var checkSum = 0;
      let promessa = new Promise(function(){
      if(status != undefined){
        
        for(i = 0; i<20; i++){
          //console.log(response.rows[i].elements[0].distance.value)
          console.log("distance" +baseDistance)
  
          if(response.rows[i].elements[0].status == "OK"){
            if(response.rows[i].elements[0].distance.value < baseDistance){
              //arrayPoints.push(response.originAddresses[i])
              
              arrayPoints[placeArray[i]] = response.originAddresses[i];
              
              //console.log("V" + i + ":" + response.rows[i].elements[0].distance.value)
              //console.log(response.rows[i].elements[0].distance.value)
            }else{
              //console.log("F" + i + ":" + response.rows[i].elements[0].distance.value)

              checkSum += 1
            }
          }else{

            checkSum += 1
          }
        }

      }
      });
      console.log("check:" + checkSum);
      if(checkSum == 20){
        console.log("names" + arrayNames)
        renderRoute(origin, destination, arrayNames);
      }
      else{
        console.log(arrayPoints);
        var j = Object.keys(arrayPoints).length;
        var k = random(0, j)
        var l = Object.keys(arrayPoints)[k]
        console.log("Valor:" + l)
        arrayNames.push(l)
        defaultDistance(l, destination, travelMode)
        nearbySearch(l, destination, maxRange)
        console.log("///")
      }

      

      //console.log(response);
      await promessa;
      
      //console.log(status);



    }
    
    //Melhorar dps, so quero ter algo por enquanto
    function errorAlert(text){
      console.log(text)
      alert(text);
    }
 
    function random(min, max){
      return Math.floor(Math.random() * (max - min) ) + min;
    }

    function deleteMarkers(markersArray) {
      for (let i = 0; i < markersArray.length; i++) {
        markersArray[i].setMap(null);
      }
    
      markersArray = [];
    }
    
  </script>

</body>

</html>